<html>
	<head>
		<link rel="stylesheet" type="text/css" href="../../res/css/main.css">
		<title> Dalvik VM </title>
		<h1> The Dalvik Virtual Machine </h1>
		<hr>
	</head>
	
	<body>
		<h3> Introduction </h3>
		An OS offers a set of common APIs on every platform on which the system runs. <br>
		That allows to run the same kind of executable file on different platform, or OS version. <br>
		This is possible in a lot of ways, such as cross-compiling the source, or execute it on a Virtual Machine. <br>
		In Android, users application are executed on the Dalvik Virtual Machine. 

		<h3> What does the DVM? </h3>
		<ul>
			<li>
				Executes Dalvik Bytecode.
			</li>
			<li>
				As there is no exceptions handling in Dalvik Bytecode, DVM handle them at runtime.						
			</li>
			<li>
				Manages multiple instance of itself ( Like the JVM does. )
			</li>
			<li>
				Provides a "sandbox" where applications can run *without* interact each other.
			</li>
			<li>
				Abstracts the problem of memory menagement to the OS.
			</li>
		</ul>
		<b> We can talk about the Dalvik VM as an "Application-Level" Scheduler. </b>

		<h3> Make it efficient </h3>
		<table>
			<tr>
				<td width=30%>
					<img src="../../res/imgs/dalvik_instance.png" 
						 alt="Various Dalvik instance"
						 width=100% >
				</td>
				<td>
					As mentioned, every application runs on a single instance of the Dalvik Virtual Machine. <br>
					Zygote is the process that make the creation of new DVM instace efficient.
					<ol>
						<li> 
							The Boot-loader loads the kernel and start init process.
						</li>
						<li> 
							Starts Zygote process.
						</li>
						<li> 
							Initializes a Dalvik VM which preloads and pre-initializes core library classes.
						</li>
						<li> 
							The system keeps in an idle state the process until the execution request.
						</li>
						<li> 
							Once an application execution request occurs, Zygote forks itself and create new process with the pre-loaded Dalvik VM.
						</li>
					</ol>
				</td>
			</tr>
		</table>

		<h3> Not a JVM clone </h3>
		<ul>
			<li>
				<b> The architecture is Register-Based ( instead of Stack-Based, like the JVM ). </b> <br>
				Up to 2^16 avaiable registers.
			</li>
			<br>
			<li>
				<b> DVM uses the Dalvik Bytecode, and not, as many people may think, the Java one. </b> <br>
				Which is far more pragmatic :
				<table>
					<tr>
						<td>
<pre class="code">
	add-int d0, s0, s1
</pre>
						</td>
						<td>
<pre class="code">
	iload s0
	iload s1
	iadd
	istore d0
</pre>
						</td>
					</tr>
				</table>
				The DVM instruction set has 218 opcodes ( JVM: 200 opcodes ). <br>
				Its use reduces by 30% fewer instructions, but 25% larger code size (bytes) compared to JVM.
			</li>
			<br>
			<li>
				<b> Constant Pool </b> <br>
				The dx compiler significantly reduces the size of the costant pool, by inling them directly in the bytecode. <br>
				This permits the use of one single costant pool, unlike the JVM does. <br>
			</li>
			<br>
			<li>
				<b> It comes without exceptions handling. </b> <br>
			</li>
			<br>
			<li>
				<b> Null references </b>
				DVM does not specify a null type, the 0 value is used instead.
			</li>
			<br>
			<li>
				<b> Ambiguos primitive types </b> <br>
				The JVM is strongly typed, and uses different opcodes for every data-type. <br>
				DVM does not distinguish between int/float/null, it uses aget ( and aget-wide for double and long ). 
			</li>
			<br>
			<li>
				<b> DVM is far more efficient. </b> <br>
				A Register-Based architecture is up to 47% more efficient than a Stack-Based one! <br>
				The larger code size involves only 1.07% extra real machine loads per VM instruction, which is negligible. 
            </li>
        </ul>
    </body>
<html>

